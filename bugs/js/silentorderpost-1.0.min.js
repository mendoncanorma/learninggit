function bpSop_silentOrderPost(e) {
    bpsilentOptions = bpSop_mergeOptions(e, defaultOptions);
    var a = bpSop_validateData();
    a && bpSop_sendRequestToApi()
}

function bpSop_sendRequestToApi() {
    var e = bpSop_getUrl(bpsilentOptions.environment),
        a = new XMLHttpRequest,
        t = [];
    t.push("HolderName=" + bpSop_getElementValue(".bp-sop-cardholdername")), t.push("RawNumber=" + bpSop_getElementValue(".bp-sop-cardnumber")), t.push("Expiration=" + bpSop_getElementValue(".bp-sop-cardexpirationdate")), t.push("SecurityCode=" + bpSop_getElementValue(".bp-sop-cardcvv")), t.push("AccessToken=" + bpsilentOptions.accessToken);
    var n = t.join("&");

    $.ajax({
       // url: livelo.urls.context + '/secure/checkout/includes/queryAccessTokenAjax.jsp',
       url: e,
       type: 'POST',
       data: n,
       dataType: 'JSON',
       success: function(data) {
            console.log(data);
       },
       error: function(e) {
            console.log("error in checkAccessToken()") 
       }
    });

    /*
    a.onreadystatechange = function() {
        if (4 == a.readyState)
            if (201 == a.status) {
                var e = JSON.parse(a.responseText);
                bpsilentOptions.onSuccess(e)
            } else {
                var t = a.status,
                    n = a.statusText;
                if (0 == t) switch (bpsilentOptions.language) {
                    case "EN":
                        n = "No response";
                        break;
                    case "ES":
                        n = "Sin respuesta";
                        break;
                    default:
                        n = "Sem resposta"
                }
                var r = {
                    Code: t,
                    Text: n
                };
                bpsilentOptions.onError(r)
            }
    };
    try {
        a.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        a.setRequestHeader("Accept", "application/json");
        a.open("POST", e, !0);
        a.send(n);
    } catch (r) {
        var s;
        switch (bpsilentOptions.language) {
            case "EN":
                s = "Error consuming SilentOrderPost API: ";
                break;
            case "ES":
                s = "Error al consumir la API del SilentOrderPost: ";
                break;
            default:
                s = "Erro ao consumir a API do SilentOrderPost: "
        }
        bpsilentOptions.onError(s + r)
    }
    */
}

function bpSop_mergeOptions(e, a) {
    var t = {};
    for (var n in a) a.hasOwnProperty(n) && (t[n] = a[n]);
    for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
    return t
}

function bpSop_getUrl(e) {
    switch (e) {
        case "sandbox":
            return "http://homologacao.pagador.com.br/post/api/public/v1/card";
        case "production":
        default:
            return "http://www.pagador.com.br/post/api/public/v1/card"
    }
}

function bpSop_validateMandatoryValue(e) {
    if (!e) return !1;
    var a = unescape(e);
    return a.trim() ? !0 : !1
}

function bpSop_validateData() {
    var e = [],
        a = !1,
        t = !1;
    bpSop_validateMandatoryValue(bpsilentOptions.accessToken) || (t = !0, e.push({
        Field: "AccessToken",
        Message: validationMessages.missingAccessToken()
    }), a = !0), /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(bpsilentOptions.accessToken) || t || (e.push({
        Field: "AccessToken",
        Message: validationMessages.invalidFormat()
    }), a = !0);
    var n = !1;
    bpSop_validateMandatoryValue(unescape(bpSop_getElementValue(".bp-sop-cardholdername"))) || (n = !0, e.push({
        Field: "bp-sop-cardholdername",
        Message: validationMessages.mandatory()
    }), a = !0), /^[a-zA-Z ]{1,64}$/.test(unescape(bpSop_getElementValue(".bp-sop-cardholdername"))) || n || (e.push({
        Field: "bp-sop-cardholdername",
        Message: validationMessages.holderFormat()
    }), a = !0);
    var r = !1;
    bpSop_validateMandatoryValue(unescape(bpSop_getElementValue(".bp-sop-cardnumber"))) || (r = !0, e.push({
        Field: "bp-sop-cardnumber",
        Message: validationMessages.mandatory()
    }), a = !0), /^[0-9]{1,19}$/.test(unescape(bpSop_getElementValue(".bp-sop-cardnumber"))) || r || (r = !0, e.push({
        Field: "bp-sop-cardnumber",
        Message: validationMessages.numberFormat()
    }), a = !0), bpSop_validateCardFormat(unescape(bpSop_getElementValue(".bp-sop-cardnumber"))) || r || (e.push({
        Field: "bp-sop-cardnumber",
        Message: validationMessages.numberValidity()
    }), a = !0);
    var s = !1;
    return bpSop_validateMandatoryValue(unescape(bpSop_getElementValue(".bp-sop-cardexpirationdate"))) || (s = !0, e.push({
        Field: "bp-sop-cardexpirationdate",
        Message: validationMessages.mandatory()
    }), a = !0), /^(0[1-9]|1[0-2])\/([0-9]{4})$/.test(unescape(bpSop_getElementValue(".bp-sop-cardexpirationdate"))) || s || (e.push({
        Field: "bp-sop-cardexpirationdate",
        Message: validationMessages.expirationFormat()
    }), a = !0), /^([0-9]{3}|[0-9]{4})$/.test(unescape(bpSop_getElementValue(".bp-sop-cardcvv"))) || (e.push({
        Field: "bp-sop-cardcvv",
        Message: validationMessages.securityCodeFormat()
    }), a = !0), a ? (bpsilentOptions.onInvalid(e), !1) : !0
}

function bpSop_validateCardFormat(e) {
    var a = unescape(e),
        t = parseInt(a.substring(a.length - 1, a.length)),
        n = a.substring(0, a.length - 1);
    return bpSop_calculateMod10(n) != parseInt(t) ? !1 : !0
}

function bpSop_calculateMod10(e) {
    for (var a = 0, t = 0; t < e.length; t++) a += parseInt(e.substring(t, t + 1));
    var n = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);
    for (t = e.length - 1; t >= 0; t -= 2) {
        var r = parseInt(e.substring(t, t + 1)),
            s = n[r];
        a += s
    }
    var o = a % 10;
    return o = 10 - o, 10 == o && (o = 0), o
}

function bpSop_getElement(e) {
    var a = document.querySelectorAll(e);
    return a && a.length > 0 ? a[0] : null
}

function bpSop_getElementValue(e) {
    var a = bpSop_getElement(e);
    return a ? encodeURIComponent("INPUT" == a.nodeName ? a.value : a.innerText) : null
}
var bpsilentOptions = {},
    defaultOptions = {
        environment: "undefined",
        onSuccess: function() {},
        onError: function() {},
        onInvalid: function() {},
        language: "PT"
    },
    validationMessages = {
        missingAccessToken: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Missing access token, try again later.";
                case "ES":
                    return "Token de acceso faltante, intentarlo más tarde.";
                default:
                    return "Código de acesso não encontrado, tente novamente mais tarde."
            }
        },
        invalidFormat: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Invalid format.";
                case "ES":
                    return "Formato inválido.";
                default:
                    return "Formato inválido."
            }
        },
        mandatory: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Please fill all the mandatory inputs.";
                case "ES":
                    return "Por favor complete todas las entradas obligatorias.";
                default:
                    return "Por favor, preencha todos os campos obrigatórios."
            }
        },
        holderFormat: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Please type a valid name.";
                case "ES":
                    return "Por favor ingrese un nombre válido.";
                default:
                    return "Por favor, insira um nome válido."
            }
        },
        numberFormat: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Should contain a maximum of 19 numeric characters.";
                case "ES":
                    return "Debe contener un máximo de 19 caracteres numéricos.";
                default:
                    return "Deve conter no máximo 64 caracteres alfanuméricos."
            }
        },
        numberValidity: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Please insert a valid card number.";
                case "ES":
                    return "Por favor ingrese un número de tarjeta válida.";
                default:
                    return "Por favor, insira um número de cartão válido."
            }
        },
        expirationFormat: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Expiration date must be valid and respect the format MM/yyyy.";
                case "ES":
                    return "Fecha de expiración debe ser válida y respetar el formato MM/aaaa.";
                default:
                    return "Data de expiração deve ser válida e respeitar o formato MM/aaaa."
            }
        },
        securityCodeFormat: function() {
            switch (bpsilentOptions.language) {
                case "EN":
                    return "Security code must contain 3 or 4 numeric characters.";
                case "ES":
                    return "Código de seguridad debe contener 3 o 4 caracteres numéricos.";
                default:
                    return "Código de segurança deve conter 3 ou 4 caracteres numéricos."
            }
        }
    };